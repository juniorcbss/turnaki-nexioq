name: Terraform Apply QAS

on:
  workflow_dispatch:
    inputs:
      confirm:
        description: 'Confirmar apply en QAS (yes/no)'
        required: true
        default: 'no'

env:
  TF_VERSION: '1.9'
  AWS_REGION: 'us-east-1'
  ENVIRONMENT: qas

jobs:
  apply:
    name: Apply QAS
    runs-on: ubuntu-latest
    environment: qas
    if: github.event.inputs.confirm == 'yes'
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        run: |
          cd terraform/environments/qas
          terraform init

      - name: Terraform Plan
        id: plan
        run: |
          cd terraform/environments/qas
          terraform plan -out=tfplan -no-color
          terraform show -no-color tfplan

      - name: Terraform Apply
        run: |
          cd terraform/environments/qas
          terraform apply -auto-approve tfplan

      - name: Export Outputs
        id: outputs
        run: |
          cd terraform/environments/qas
          echo "api_url=$(terraform output -raw api_base_url || echo 'not-available')" >> $GITHUB_OUTPUT
          echo "cloudfront_url=$(terraform output -raw cloudfront_distribution_domain || echo 'not-available')" >> $GITHUB_OUTPUT

  deploy-backend:
    name: Deploy Backend (Lambdas)
    runs-on: ubuntu-latest
    needs: apply
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-lambda
        run: pip install cargo-lambda

      - name: Cache Cargo
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: backend

      - name: Build Lambdas
        run: |
          cd backend
          cargo lambda build --arm64 --release

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy Lambdas
        run: |
          cd backend/target/lambda
          
          functions=(
            "availability"
            "bookings"
            "health"
            "professionals"
            "schedule-reminder"
            "send-notification"
            "tenants"
            "treatments"
          )
          
          for fn in "${functions[@]}"; do
            if [ -d "$fn" ]; then
              echo "Deploying $fn..."
              aws lambda update-function-code \
                --function-name "tk-nq-qas-$fn" \
                --zip-file "fileb://$fn/bootstrap.zip" \
                --no-cli-pager
            fi
          done

  deploy-frontend:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    needs: apply
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: frontend/package-lock.json

      - name: Install Dependencies
        run: |
          cd frontend
          npm ci

      - name: Build Frontend
        run: |
          cd frontend
          npm run build

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to S3
        run: |
          cd frontend
          aws s3 sync build/ "s3://tk-nq-qas-frontend/" \
            --delete \
            --cache-control "public, max-age=31536000, immutable" \
            --exclude "*.html" \
            --exclude "manifest.json"
          
          aws s3 sync build/ "s3://tk-nq-qas-frontend/" \
            --exclude "*" \
            --include "*.html" \
            --include "manifest.json" \
            --cache-control "public, max-age=0, must-revalidate"

      - name: Invalidate CloudFront
        run: |
          cd terraform/environments/qas
          DISTRIBUTION_ID=$(terraform output -raw cloudfront_distribution_id || echo "")
          if [ -n "$DISTRIBUTION_ID" ]; then
            aws cloudfront create-invalidation \
              --distribution-id "$DISTRIBUTION_ID" \
              --paths "/*"
          fi
