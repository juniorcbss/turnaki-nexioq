name: Terraform Apply PRD

on:
  workflow_dispatch:
    inputs:
      confirm:
        description: '‚ö†Ô∏è PRODUCCI√ìN - Confirmar apply (yes)'
        required: true
        default: 'no'

env:
  TF_VERSION: '1.9'
  AWS_REGION: 'us-east-1'
  ENVIRONMENT: prd

jobs:
  validation:
    name: Pre-deployment Checks
    runs-on: ubuntu-latest
    if: github.event.inputs.confirm == 'yes'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Verify Branch
        run: |
          if [ "${{ github.ref }}" != "refs/heads/main" ]; then
            echo "‚ùå Producci√≥n solo puede desplegarse desde main"
            exit 1
          fi

      - name: Check for Tag
        run: |
          if ! git describe --exact-match --tags HEAD 2>/dev/null; then
            echo "‚ö†Ô∏è Warning: No hay tag en este commit"
            echo "Se recomienda crear un tag de versi√≥n antes de desplegar a producci√≥n"
          fi

  apply:
    name: Apply PRD
    runs-on: ubuntu-latest
    needs: validation
    environment: prd
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_TO_ASSUME_PRD }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        run: |
          cd terraform/environments/prd
          terraform init

      - name: Terraform Plan
        id: plan
        run: |
          cd terraform/environments/prd
          terraform plan -out=tfplan -no-color
          terraform show -no-color tfplan > plan_output.txt

      - name: Upload Plan for Review
        uses: actions/upload-artifact@v4
        with:
          name: tfplan-prd-${{ github.sha }}
          path: terraform/environments/prd/plan_output.txt
          retention-days: 30

      - name: Manual Approval Comment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const plan = fs.readFileSync('terraform/environments/prd/plan_output.txt', 'utf8');
            const truncatedPlan = plan.length > 60000 ? plan.substring(0, 60000) + '\n...(plan truncado)' : plan;
            
            core.notice(`Plan de producci√≥n generado. Revisar antes de aprobar.`);

      - name: Terraform Apply
        run: |
          cd terraform/environments/prd
          terraform apply -auto-approve tfplan

      - name: Export Outputs
        id: outputs
        run: |
          cd terraform/environments/prd
          echo "api_url=$(terraform output -raw api_base_url || echo 'not-available')" >> $GITHUB_OUTPUT
          echo "cloudfront_url=$(terraform output -raw cloudfront_distribution_domain || echo 'not-available')" >> $GITHUB_OUTPUT

  deploy-backend:
    name: Deploy Backend (Lambdas)
    runs-on: ubuntu-latest
    needs: apply
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-lambda
        run: pip install cargo-lambda

      - name: Cache Cargo
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: backend

      - name: Build Lambdas
        run: |
          cd backend
          cargo lambda build --arm64 --release

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_TO_ASSUME_PRD }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy Lambdas (with gradual rollout)
        run: |
          cd backend/target/lambda
          
          functions=(
            "availability"
            "bookings"
            "health"
            "professionals"
            "schedule-reminder"
            "send-notification"
            "tenants"
            "treatments"
          )
          
          for fn in "${functions[@]}"; do
            if [ -d "$fn" ]; then
              echo "Deploying $fn to production..."
              aws lambda update-function-code \
                --function-name "tk-nq-prd-$fn" \
                --zip-file "fileb://$fn/bootstrap.zip" \
                --no-cli-pager
              
              # Esperar un momento entre deploys
              sleep 5
            fi
          done

  deploy-frontend:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    needs: apply
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: frontend/package-lock.json

      - name: Install Dependencies
        run: |
          cd frontend
          npm ci

      - name: Build Frontend (Production)
        run: |
          cd frontend
          NODE_ENV=production npm run build

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_TO_ASSUME_PRD }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to S3
        run: |
          cd frontend
          aws s3 sync build/ "s3://tk-nq-prd-frontend/" \
            --delete \
            --cache-control "public, max-age=31536000, immutable" \
            --exclude "*.html" \
            --exclude "manifest.json"
          
          aws s3 sync build/ "s3://tk-nq-prd-frontend/" \
            --exclude "*" \
            --include "*.html" \
            --include "manifest.json" \
            --cache-control "public, max-age=0, must-revalidate"

      - name: Invalidate CloudFront
        run: |
          cd terraform/environments/prd
          DISTRIBUTION_ID=$(terraform output -raw cloudfront_distribution_id || echo "")
          if [ -n "$DISTRIBUTION_ID" ]; then
            aws cloudfront create-invalidation \
              --distribution-id "$DISTRIBUTION_ID" \
              --paths "/*"
          fi

  health-check:
    name: Production Health Check
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_TO_ASSUME_PRD }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get API URL
        id: api
        run: |
          cd terraform/environments/prd
          terraform init
          API_URL=$(terraform output -raw api_base_url)
          echo "url=$API_URL" >> $GITHUB_OUTPUT

      - name: Comprehensive Health Check
        run: |
          echo "üîç Testing Production API: ${{ steps.api.outputs.url }}"
          
          # Health endpoint
          response=$(curl -s -o /dev/null -w "%{http_code}" "${{ steps.api.outputs.url }}/health")
          
          if [ "$response" = "200" ]; then
            echo "‚úÖ Production health check passed (HTTP $response)"
          else
            echo "‚ùå Production health check FAILED (HTTP $response)"
            exit 1
          fi

      - name: Create Release Tag
        if: success()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const date = new Date().toISOString().split('T')[0];
            const tagName = `prd-${date}-${context.sha.substring(0, 7)}`;
            
            try {
              await github.rest.git.createRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `refs/tags/${tagName}`,
                sha: context.sha
              });
              core.info(`‚úÖ Created release tag: ${tagName}`);
            } catch (error) {
              core.warning(`Could not create tag: ${error.message}`);
            }

      - name: Deployment Success Notification
        if: success()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `### üöÄ Production Deployment - EXITOSO
            
            **Ambiente:** Production
            **Commit:** \`${{ github.sha }}\`
            **Actor:** @${{ github.actor }}
            **Fecha:** ${new Date().toISOString()}
            
            **URLs:**
            - API: ${{ steps.api.outputs.url }}
            - Frontend: En CloudFront
            
            **Componentes desplegados:**
            - ‚úÖ Terraform Infrastructure
            - ‚úÖ Backend Lambdas (8 funciones)
            - ‚úÖ Frontend (S3 + CloudFront)
            - ‚úÖ Health Checks PASSED
            
            **Monitoreo:**
            - CloudWatch Dashboard: [Ver m√©tricas](https://console.aws.amazon.com/cloudwatch)
            - X-Ray: [Ver trazas](https://console.aws.amazon.com/xray)
            
            ‚ö†Ô∏è **Importante:** Monitorear logs por las pr√≥ximas 2 horas
            `;
            
            github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: output
            });

      - name: Rollback Instructions
        if: failure()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `### ‚ùå Production Deployment - FALLIDO
            
            **Health checks fallaron despu√©s del deployment.**
            
            **Rollback inmediato:**
            \`\`\`bash
            # 1. Identificar √∫ltima versi√≥n estable
            git tag -l "prd-*" | tail -2
            
            # 2. Checkout a esa versi√≥n
            git checkout <tag-anterior>
            
            # 3. Re-deploy
            gh workflow run terraform-apply-prd.yml -f confirm=yes
            \`\`\`
            
            **Contactar:** @devops-team
            `;
            
            github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: output
            });
